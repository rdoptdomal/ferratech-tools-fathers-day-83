// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  sku         String    @unique
  images      String[]
  price       Float
  originalPrice Float?
  stock       Int       @default(0)
  description String
  shortDescription String?
  variations  Json?     // Ex: { "Cor": ["Ouro Antique", "Cromado"], "Tamanho": ["35mm", "40mm"] }
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  categoryId  String    @db.ObjectId
  brand       String?
  rating      Float     @default(0)
  reviews     Int       @default(0)
  features    String[]
  specifications Json?
  isFeatured  Boolean   @default(false)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String    @unique
  description String?
  image       String?
  parent      Category? @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId    String?   @db.ObjectId
  children    Category[] @relation("SubCategories")
  products    Product[]
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  name      String?
  phone     String?
  cpf       String?  @unique
  addresses Address[]
  orders    Order[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  street      String
  number      String
  complement  String?
  neighborhood String
  city        String
  state       String
  zipCode     String
  isDefault   Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId      String   @db.ObjectId
  orders      Order[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Order {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  user          User        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId        String      @db.ObjectId
  shippingAddress Address   @relation(fields: [addressId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  addressId     String      @db.ObjectId
  items         OrderItem[]
  subtotal      Float
  shipping      Float       @default(0)
  discount      Float       @default(0)
  total         Float
  status        OrderStatus @default(PENDING)
  paymentMethod PaymentMethod
  paymentStatus PaymentStatus @default(PENDING)
  transactionId String?     // BlackCat transaction ID
  blackcatPaymentId String? // BlackCat payment ID
  blackcatWebhookData Json? // BlackCat webhook data
  notes         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  productId String  @db.ObjectId
  quantity  Int
  price     Float
  variation Json?   // Ex: { "Cor": "Ouro Antique", "Tamanho": "35mm" }
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  PIX
  CREDIT_CARD
  BOLETO
  BANK_TRANSFER
} 